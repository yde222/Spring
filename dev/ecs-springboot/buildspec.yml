# AWS CodeBuild 빌드 스펙 파일
# Spring Boot 애플리케이션을 Docker 이미지로 빌드하고 ECR에 푸시하는 CI/CD 파이프라인 정의

# CodeBuild 스펙 버전 (2.0 사용)
version: 0.2

# 환경 변수 및 설정
env:
  # Git 자격 증명 도우미 활성화 (프라이빗 리포지토리 접근 시 필요)
  git-credential-helper: yes
  
  # 빌드에서 사용할 환경 변수들 정의
  variables:
    # ECS 서비스에서 사용할 컨테이너 이름
    ECS_CONTAINER_NAME: ecs-springboot-container
    # ECR 리포지토리 이름 (사전에 AWS ECR에 생성되어 있어야 함)
    IMAGE_REPO_NAME: course-ecs-springboot-ecr # aws ecr에 등록이 되어 있는 name
    # Docker 이미지 태그 (배포 시 사용)
    IMAGE_TAG: latest
    # AWS 기본 리전 (서울 리전)
    AWS_DEFAULT_REGION: ap-northeast-2

# 빌드 단계별 실행 명령어들
phases:
  # 빌드 준비 단계: ECR 로그인 및 환경 설정
  pre_build:
    commands:
      # ECR(Elastic Container Registry)에 로그인하여 Docker 이미지 푸시 권한 획득
      # https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ecr/get-login-password.html
      # https://stackoverflow.com/questions/77488134/codebuild-error-exit-status-127-file-name-too-long
      - echo Logging in to Amazon ECR...
      # AWS CLI 버전 확인
      - aws --version
      # ECR 로그인을 위한 임시 패스워드 생성
      - ECR_PASSWORD=$(aws ecr get-login-password --region $AWS_DEFAULT_REGION)
      # 현재 AWS 계정 ID 조회
      - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
      # ECR에 Docker 로그인 수행
      - echo -n ${ECR_PASSWORD} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
      # ECR 리포지토리 전체 URI 생성 (푸시할 최종 경로)
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

  # 빌드 실행 단계: Docker 이미지 빌드 및 태깅
  build:
    commands:
      # 빌드 시작 시간 출력
      - echo Build started on `date`
      - echo Building the Docker image...
      # Dockerfile을 사용하여 Spring Boot 애플리케이션 Docker 이미지 빌드
      - docker build -f ./Dockerfile -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      # ECR에 푸시하기 위해 이미지에 ECR URI 태그 추가
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI

  # 빌드 후 단계: ECR 푸시 및 ECS 배포를 위한 설정 파일 생성
  post_build:
    commands:
      - echo package Source...
      - echo push the Docker image...
      # 빌드된 Docker 이미지를 ECR에 푸시
      - docker push $REPOSITORY_URI

      # ECS 배포를 위한 imagedefinitions.json 파일 생성
      # 이 파일은 CodePipeline에서 ECS 서비스 업데이트 시 사용됨
      - printf '[{"name":"%s","imageUri":"%s"}]' $ECS_CONTAINER_NAME $REPOSITORY_URI > imagedefinitions.json
      # 설정된 컨테이너 이름 출력 (디버깅용)
      - echo $ECS_CONTAINER_NAME
      - echo printing imagedefinitions.json
      # 생성된 배포 설정 파일 내용 확인
      - cat imagedefinitions.json

# 빌드 결과물 정의
artifacts:
  files:
    # ECS 배포에 필요한 이미지 정의 파일을 아티팩트로 출력
    # CodePipeline의 다음 단계(Deploy)에서 이 파일을 사용하여 ECS 서비스 업데이트
    - imagedefinitions.json